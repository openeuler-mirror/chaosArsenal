/*
Copyright 2023 Sangfor Technologies Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpsInfo ops info
//
// swagger:model OpsInfo
type OpsInfo struct {

	// The domain to which the fault belongs
	Domain string `json:"domain,omitempty"`

	// The fault type
	FaultType string `json:"faultType,omitempty"`

	// A string concatenated from the parameters obtained from the HTTP request
	Flags string `json:"flags,omitempty"`

	// The time at which the fault was injected
	// Format: date-time
	InjectTime strfmt.DateTime `json:"injectTime,omitempty"`

	// The fault type private data
	Private string `json:"private,omitempty"`

	// Used to describe whether a fault requires proactive cleanup
	ProactiveCleanup bool `json:"proactiveCleanup,omitempty"`

	// Describes the status of the fault
	Status string `json:"status,omitempty"`

	// The fault corresponds to the modification time of the database table entry
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"updateTime,omitempty"`

	// The UUID generated during fault injected
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this ops info
func (m *OpsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInjectTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpsInfo) validateInjectTime(formats strfmt.Registry) error {
	if swag.IsZero(m.InjectTime) { // not required
		return nil
	}

	if err := validate.FormatOf("injectTime", "body", "date-time", m.InjectTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpsInfo) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ops info based on context it is used
func (m *OpsInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OpsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpsInfo) UnmarshalBinary(b []byte) error {
	var res OpsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
