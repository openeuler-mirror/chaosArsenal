/*
Copyright 2023 Sangfor Technologies Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostFaultsHandlerFunc turns a function with the right signature into a post faults handler
type PostFaultsHandlerFunc func(PostFaultsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFaultsHandlerFunc) Handle(params PostFaultsParams) middleware.Responder {
	return fn(params)
}

// PostFaultsHandler interface for that can handle valid post faults params
type PostFaultsHandler interface {
	Handle(PostFaultsParams) middleware.Responder
}

// NewPostFaults creates a new http.Handler for the post faults operation
func NewPostFaults(ctx *middleware.Context, handler PostFaultsHandler) *PostFaults {
	return &PostFaults{Context: ctx, Handler: handler}
}

/*
	PostFaults swagger:route POST /faults postFaults

Inject a fault.
*/
type PostFaults struct {
	Context *middleware.Context
	Handler PostFaultsHandler
}

func (o *PostFaults) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostFaultsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
